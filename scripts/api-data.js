// Êï∞ÊçÆÁÆ°ÁêÜÂäüËÉΩ - Â∞èÈõ®ÂæÆÂØí (‰ΩøÁî®ÂêéÁ´ØAPI)

class ApiDataManager {
    constructor() {
        this.isOnline = navigator.onLine;
        this.setupOnlineListener();
        this.localStorageKeys = {
            musicPlayerState: 'musicPlayerState',
            musicPlayerPosition: 'musicPlayerPosition',
            appSettings: 'appSettings',
            // Á¶ªÁ∫øÁºìÂ≠ò
            offlineFoodRecords: 'offlineFoodRecords',
            offlineMovieRecords: 'offlineMovieRecords',
            offlineCalendarNotes: 'offlineCalendarNotes'
        };
        
        this.defaultSettings = {
            theme: 'light',
            autoplay: false,
            notifications: true,
            useApi: true
        };
        
        this.init();
    }
    
    init() {
        console.log('üöÄ APIÊï∞ÊçÆÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂºÄÂßã...');
        console.log('üåê ÁΩëÁªúÁä∂ÊÄÅ:', this.isOnline ? 'Âú®Á∫ø' : 'Á¶ªÁ∫ø');
        console.log('‚úÖ APIÊï∞ÊçÆÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂÆåÊàê');
    }
    
    setupOnlineListener() {
        window.addEventListener('online', () => {
            this.isOnline = true;
            console.log('ÁΩëÁªúÂ∑≤ËøûÊé•ÔºåÂ∞Ü‰ΩøÁî®API');
        });
        
        window.addEventListener('offline', () => {
            this.isOnline = false;
            console.log('ÁΩëÁªúÂ∑≤Êñ≠ÂºÄÔºåÂ∞Ü‰ΩøÁî®Êú¨Âú∞Â≠òÂÇ®');
        });
    }
    
    // ÈÄöÁî®APIË∞ÉÁî®ÊñπÊ≥ï
    async callApi(apiMethod, ...args) {
        if (!this.isOnline) {
            console.warn('üö´ ÁΩëÁªú‰∏çÂèØÁî®ÔºåÊó†Ê≥ïË∞ÉÁî®API');
            throw new Error('ÁΩëÁªú‰∏çÂèØÁî®');
        }
        
        if (!window.apiService) {
            console.warn('‚ùå APIÊúçÂä°Êú™Âä†ËΩΩ');
            throw new Error('APIÊúçÂä°Êú™Âä†ËΩΩ');
        }
        
        try {
            console.log('üìû Ë∞ÉÁî®APIÊñπÊ≥ï:', apiMethod.name);
            const result = await apiMethod.apply(window.apiService, args);
            console.log('‚úÖ APIË∞ÉÁî®ÊàêÂäü:', apiMethod.name);
            return result;
        } catch (error) {
            console.error('‚ùå APIË∞ÉÁî®Â§±Ë¥•:', apiMethod.name, error.message);
            throw error;
        }
    }
    
    // ÁæéÈ£üËÆ∞ÂΩïÁõ∏ÂÖ≥ÊñπÊ≥ï
    async getFoodRecords(params = {}) {
        try {
            const response = await this.callApi(window.apiService.getFoodRecords, params);
            return response.data || [];
        } catch (error) {
            console.warn('‰ΩøÁî®Á¶ªÁ∫øÊï∞ÊçÆ:', error.message);
            return this.getOfflineFoodRecords();
        }
    }
    
    async addFoodRecord(record) {
        try {
            const response = await this.callApi(window.apiService.createFoodRecord, record);
            return response.success;
        } catch (error) {
            console.warn('‰øùÂ≠òÂà∞Á¶ªÁ∫øÂ≠òÂÇ®:', error.message);
            return this.saveOfflineFoodRecord(record);
        }
    }
    
    async updateFoodRecord(id, record) {
        try {
            const response = await this.callApi(window.apiService.updateFoodRecord, id, record);
            return response.success;
        } catch (error) {
            console.warn('Êõ¥Êñ∞Á¶ªÁ∫øÊï∞ÊçÆÂ§±Ë¥•:', error.message);
            return false;
        }
    }
    
    async deleteFoodRecord(id) {
        try {
            const response = await this.callApi(window.apiService.deleteFoodRecord, id);
            return response.success;
        } catch (error) {
            console.warn('Âà†Èô§Á¶ªÁ∫øÊï∞ÊçÆÂ§±Ë¥•:', error.message);
            return false;
        }
    }
    
    // ÁîµÂΩ±ËÆ∞ÂΩïÁõ∏ÂÖ≥ÊñπÊ≥ï
    async getMovieRecords(params = {}) {
        try {
            const response = await this.callApi(window.apiService.getMovieRecords, params);
            return response.data || [];
        } catch (error) {
            console.warn('‰ΩøÁî®Á¶ªÁ∫øÊï∞ÊçÆ:', error.message);
            return this.getOfflineMovieRecords();
        }
    }
    
    async addMovieRecord(record) {
        try {
            const response = await this.callApi(window.apiService.createMovieRecord, record);
            return response.success;
        } catch (error) {
            console.warn('‰øùÂ≠òÂà∞Á¶ªÁ∫øÂ≠òÂÇ®:', error.message);
            return this.saveOfflineMovieRecord(record);
        }
    }
    
    async updateMovieRecord(id, record) {
        try {
            const response = await this.callApi(window.apiService.updateMovieRecord, id, record);
            return response.success;
        } catch (error) {
            console.warn('Êõ¥Êñ∞Á¶ªÁ∫øÊï∞ÊçÆÂ§±Ë¥•:', error.message);
            return false;
        }
    }
    
    async deleteMovieRecord(id) {
        try {
            const response = await this.callApi(window.apiService.deleteMovieRecord, id);
            return response.success;
        } catch (error) {
            console.warn('Âà†Èô§Á¶ªÁ∫øÊï∞ÊçÆÂ§±Ë¥•:', error.message);
            return false;
        }
    }
    
    // Êó•ÂéÜÂ§áÊ≥®Áõ∏ÂÖ≥ÊñπÊ≥ï
    async getCalendarNotes(params = {}) {
        try {
            const response = await this.callApi(window.apiService.getCalendarNotes, params);
            return response.data || [];
        } catch (error) {
            console.warn('‰ΩøÁî®Á¶ªÁ∫øÊï∞ÊçÆ:', error.message);
            return this.getOfflineCalendarNotes();
        }
    }
    
    async getNoteByDate(date) {
        try {
            const response = await this.callApi(window.apiService.getNoteByDate, date);
            return response.data;
        } catch (error) {
            console.warn('‰ΩøÁî®Á¶ªÁ∫øÊï∞ÊçÆ:', error.message);
            const notes = this.getOfflineCalendarNotes();
            return notes[date] || null;
        }
    }
    
    async addCalendarNote(date, content) {
        try {
            const response = await this.callApi(window.apiService.createOrUpdateNote, date, content);
            return response.success;
        } catch (error) {
            console.warn('‰øùÂ≠òÂà∞Á¶ªÁ∫øÂ≠òÂÇ®:', error.message);
            return this.saveOfflineCalendarNote(date, content);
        }
    }
    
    async deleteCalendarNote(date) {
        try {
            const response = await this.callApi(window.apiService.deleteNote, date);
            return response.success;
        } catch (error) {
            console.warn('Âà†Èô§Á¶ªÁ∫øÊï∞ÊçÆÂ§±Ë¥•:', error.message);
            return false;
        }
    }\n    \n    async getMonthNotes(year, month) {\n        try {\n            const response = await this.callApi(window.apiService.getMonthNotes, year, month);\n            return response.data?.notes || {};\n        } catch (error) {\n            console.warn('‰ΩøÁî®Á¶ªÁ∫øÊï∞ÊçÆ:', error.message);\n            const allNotes = this.getOfflineCalendarNotes();\n            const monthNotes = {};\n            const prefix = `${year}-${month.toString().padStart(2, '0')}-`;\n            \n            Object.keys(allNotes).forEach(date => {\n                if (date.startsWith(prefix)) {\n                    monthNotes[date] = allNotes[date];\n                }\n            });\n            \n            return monthNotes;\n        }\n    }\n    \n    // Êñá‰ª∂ÁÆ°ÁêÜÁõ∏ÂÖ≥ÊñπÊ≥ï\n    async getFileRecords(params = {}) {\n        try {\n            const response = await this.callApi(window.apiService.getFileRecords, params);\n            return response.data || [];\n        } catch (error) {\n            console.warn('Ëé∑ÂèñÊñá‰ª∂ÂàóË°®Â§±Ë¥•:', error.message);\n            return [];\n        }\n    }\n    \n    async uploadFile(file, description = '', category = '') {\n        try {\n            const response = await this.callApi(window.apiService.uploadFile, file, description, category);\n            return response;\n        } catch (error) {\n            console.error('Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•:', error.message);\n            throw error;\n        }\n    }\n    \n    async deleteFile(id) {\n        try {\n            const response = await this.callApi(window.apiService.deleteFile, id);\n            return response.success;\n        } catch (error) {\n            console.error('Êñá‰ª∂Âà†Èô§Â§±Ë¥•:', error.message);\n            return false;\n        }\n    }\n    \n    // Á¶ªÁ∫øÂ≠òÂÇ®ÊñπÊ≥ï\n    getOfflineFoodRecords() {\n        try {\n            return JSON.parse(localStorage.getItem(this.localStorageKeys.offlineFoodRecords) || '[]');\n        } catch (e) {\n            return [];\n        }\n    }\n    \n    saveOfflineFoodRecord(record) {\n        try {\n            const records = this.getOfflineFoodRecords();\n            const newRecord = {\n                ...record,\n                id: Date.now(),\n                created_at: new Date().toISOString()\n            };\n            records.unshift(newRecord);\n            localStorage.setItem(this.localStorageKeys.offlineFoodRecords, JSON.stringify(records));\n            return true;\n        } catch (e) {\n            console.error('‰øùÂ≠òÁ¶ªÁ∫øÁæéÈ£üËÆ∞ÂΩïÂ§±Ë¥•:', e);\n            return false;\n        }\n    }\n    \n    getOfflineMovieRecords() {\n        try {\n            return JSON.parse(localStorage.getItem(this.localStorageKeys.offlineMovieRecords) || '[]');\n        } catch (e) {\n            return [];\n        }\n    }\n    \n    saveOfflineMovieRecord(record) {\n        try {\n            const records = this.getOfflineMovieRecords();\n            const newRecord = {\n                ...record,\n                id: Date.now(),\n                created_at: new Date().toISOString()\n            };\n            records.unshift(newRecord);\n            localStorage.setItem(this.localStorageKeys.offlineMovieRecords, JSON.stringify(records));\n            return true;\n        } catch (e) {\n            console.error('‰øùÂ≠òÁ¶ªÁ∫øÁîµÂΩ±ËÆ∞ÂΩïÂ§±Ë¥•:', e);\n            return false;\n        }\n    }\n    \n    getOfflineCalendarNotes() {\n        try {\n            return JSON.parse(localStorage.getItem(this.localStorageKeys.offlineCalendarNotes) || '{}');\n        } catch (e) {\n            return {};\n        }\n    }\n    \n    saveOfflineCalendarNote(date, content) {\n        try {\n            const notes = this.getOfflineCalendarNotes();\n            if (content.trim()) {\n                notes[date] = content.trim();\n            } else {\n                delete notes[date];\n            }\n            localStorage.setItem(this.localStorageKeys.offlineCalendarNotes, JSON.stringify(notes));\n            return true;\n        } catch (e) {\n            console.error('‰øùÂ≠òÁ¶ªÁ∫øÊó•ÂéÜÂ§áÊ≥®Â§±Ë¥•:', e);\n            return false;\n        }\n    }\n    \n    // Â∫îÁî®ËÆæÁΩÆ\n    getSettings() {\n        try {\n            const settings = JSON.parse(localStorage.getItem(this.localStorageKeys.appSettings) || '{}');\n            return { ...this.defaultSettings, ...settings };\n        } catch (e) {\n            return this.defaultSettings;\n        }\n    }\n    \n    saveSettings(settings) {\n        try {\n            const currentSettings = this.getSettings();\n            const newSettings = { ...currentSettings, ...settings };\n            localStorage.setItem(this.localStorageKeys.appSettings, JSON.stringify(newSettings));\n            return true;\n        } catch (e) {\n            console.error('‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•:', e);\n            return false;\n        }\n    }\n    \n    // ÂÅ•Â∫∑Ê£ÄÊü•\n    async checkApiHealth() {\n        try {\n            const response = await this.callApi(window.apiService.healthCheck);\n            return response.status === 'healthy';\n        } catch (error) {\n            console.warn('APIÂÅ•Â∫∑Ê£ÄÊü•Â§±Ë¥•:', error.message);\n            return false;\n        }\n    }\n}\n\n// ÂàõÂª∫ÂÖ®Â±ÄÊï∞ÊçÆÁÆ°ÁêÜÂô®ÂÆû‰æãÔºà‰øùÊåÅÂêëÂêéÂÖºÂÆπÔºâ
console.log('üîß Ê≠£Âú®ÂàõÂª∫Êï∞ÊçÆÁÆ°ÁêÜÂô®ÂÆû‰æã...');
const dataManager = new ApiDataManager();
console.log('‚úÖ Êï∞ÊçÆÁÆ°ÁêÜÂô®ÂÆû‰æãÂàõÂª∫ÂÆåÊàê');

// ‰∏∫‰∫ÜÂêëÂêéÂÖºÂÆπÔºå‰øùÁïôÊóßÁöÑDataManagerÁ±ªÂêç
const DataManager = ApiDataManager;

// ÂØºÂá∫Âà∞ÂÖ®Â±Ä‰ΩúÁî®Âüü
window.dataManager = dataManager;
window.DataManager = DataManager;

// Ê∑ªÂä†Ë∞ÉËØï‰ø°ÊÅØ
console.log('‚úÖ Êï∞ÊçÆÁÆ°ÁêÜÂô®Â∑≤Êö¥Èú≤Âà∞ÂÖ®Â±Ä‰ΩúÁî®Âüü');
console.log('window.dataManager:', !!window.dataManager);
console.log('window.DataManager:', !!window.DataManager);

// Á°Æ‰øùDOMÂä†ËΩΩÂêéÂÜçÊ¨°Ê£ÄÊü•
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
        console.log('üìã DOMÂä†ËΩΩÂÆåÊàêÔºåÂÜçÊ¨°Ê£ÄÊü•Êï∞ÊçÆÁÆ°ÁêÜÂô®Áä∂ÊÄÅ:');
        console.log('  window.dataManager:', !!window.dataManager);
        console.log('  dataManager.isOnline:', window.dataManager?.isOnline);
    });
} else {
    console.log('üìã DOMÂ∑≤Â∞±Áª™ÔºåÊï∞ÊçÆÁÆ°ÁêÜÂô®Áä∂ÊÄÅ:');
    console.log('  window.dataManager:', !!window.dataManager);
    console.log('  dataManager.isOnline:', window.dataManager?.isOnline);
}
